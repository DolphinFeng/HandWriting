// 如何使用正则验证 18 位身份号码（字节一面）

// 身份证号的规则
// 长度：18 位。
// 前 1 位：1-9 的数字，表示省份代码。
// 第 2-6 位：5 位数字，表示城市和区县代码。
// 第 7-10 位：4 位数字，表示出生年份，范围为 1800-2099。
// 第 11-12 位：2 位数字，表示出生月份，范围为 01-12。
// 第 13-14 位：2 位数字，表示出生日期，范围为 01-31。
// 第 15-17 位：3 位数字，表示顺序码。
// 第 18 位：1 位数字或字母 X，表示校验码。

const idCardRegex = /^[1-9]\d{5}(18|19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/;

// ^：匹配字符串的开始。
// [1-9]：匹配第一位数字，范围为 1-9。
// \d{5}：匹配接下来的 5 位数字，表示城市和区县代码。
// (18|19|20)：匹配出生年份的前两位，范围为 1800-2099。
// \d{2}：匹配出生年份的后两位数字。
// (0[1-9]|1[0-2])：匹配出生月份，范围为 01-12。
// 0[1-9]：匹配 01 到 09。
// 1[0-2]：匹配 10 到 12。
// (0[1-9]|[12]\d|3[01])：匹配出生日期，范围为 01-31。
// 0[1-9]：匹配 01 到 09。
// [12]\d：匹配 10 到 29。
// 3[01]：匹配 30 和 31。
// \d{3}：匹配顺序码的 3 位数字。
// (\d|X)：匹配校验码，范围为 0-9 或 X。
// $：匹配字符串的结束。

function validateIdCard(idCard) {
    return idCardRegex.test(idCard);
}

// 测试代码
const testIds = [
    "11010519491231002X", // 有效身份证
    "11010519491231002",  // 无效身份证（少一位）
    "11010519491331002X", // 无效身份证（月份错误）
    "11010519491232002X", // 无效身份证（日期错误）
    "21010519491231002X"  // 有效身份证
];

testIds.forEach(id => {
    console.log(`身份证号 ${id} 验证结果: ${validateIdCard(id)}`);
});